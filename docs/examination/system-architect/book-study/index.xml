<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>读书和学习笔记 on 技术的路上奔跑</title>
    <link>/docs/examination/system-architect/book-study/</link>
    <description>Recent content in 读书和学习笔记 on 技术的路上奔跑</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language><atom:link href="/docs/examination/system-architect/book-study/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>可靠性设计</title>
      <link>/docs/examination/system-architect/book-study/reliability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/examination/system-architect/book-study/reliability/</guid>
      <description>1. 基本概念 # 可靠性工程（Reliability Engineering）: 是在产品寿命周期全过程（论证、方案、工程研制、生产和使用）中同产品故障作斗争的一门学科 1.1. 可靠性: 产品在规定的条件下、规定的时间内完成规定的功能的能力，即业界所说的三规。是产品的一种固有属性 # 1) 规定的条件：产品的运行环境 # 环境条件：温度，湿度，压力，振动，冲击，电磁场，电磁辐射等等 工作条件：工作应力，系统负载，业务模型，人员操作等等 2) 规定的时间：产品的生命周期 # 工作时间：时长（小时）、频次（次数）、距离（公里），例如交换机寿命20年，手机寿命5年，手机划盖工作寿命6万次，汽车寿命30万公里 非工作时间：待机状态，储存状态等 3) 规定的功能：产品的技术性指标 # 指产品标准或产品技术条件中所规定的各项技术性能（技术指标） 1.2. 故障（Fault）：系统内的对象实体相对正常状态的偏离（站在这个对象的外部来看）的一种静态状态。例如进程挂死，硬盘坏道，CPU降频，网络丢包，文件系统只读，配置文件丢失等等 # 偏离的表现形式称之为故障模式 = 故障对象（主语）+ 故障表现（谓语） 故障对象：保证系统运行以及提供业务能力的物理（硬盘、网卡等等）或者逻辑实体（进程、文件、数据等），可以是一个单一实体，也可以是多个单一实体组成的综合实体（主机、集群、站点等），其本质是系统的组成成分，类似于一座房子的墙面，房梁、房檐、砖头、瓦片；也类似于一个人的四肢、眼睛、耳朵、嘴巴等 故障表现：偏离于正常状态的表达，一般是动词、形容词来表示，比如只读、退出、掉电、卡慢、崩溃、坏道、高温、泄漏、过载、损坏、丢失、抢占、重启、失败、空间满等等 系统是由软件和硬件构成的，所以系统的故障对象就是软件和硬件，其中硬件包含主机（主机本身如主板、机箱等；以及主机上的硬件部件如硬盘、网卡、CPU、电源、风扇、内存、PCIE接口等等）以及网络设备（用于主机之间的连接，例如交换机、路由器、光纤网线、网卡/光模块等），软件包含操作系统（内核、驱动、系统服务等）、系统业务软件（包含进程、服务、容器、虚拟机、数据、文件、开源中间件等等） 故障被激活（Active）的时候会产生错误（Error），未被激活的故障就是休眠的/静默的（Dormant） 故障来源： 对象实体内部自然产生的：例如软件缺陷，硬件的自然损坏等。也叫作内源性故障 对象实体外部交互产生的：例如配置类故障（配置项不正确），误操作类故障（误删文件）、交互类故障等、也叫作外源性故障 1.3. 错误（Error）：是故障被激活后的一种动态状态，也是会直接导致业务失效的某种状态（State）。典型的错误如消息发送超时（网络丢包被激活导致的），请求无响应（对端进程挂死被激活导致的），配置文件读失败（配置文件丢失被激活导致的），硬盘写超时（硬盘坏道被激活导致的），硬盘读写慢（硬盘坏道被激活导致的）等等 # 激活：业务操作路径经过了某个存在故障的对象实体，从而导致该对象实体的某个故障被激活（也就是说故障只有被激活才会对系统产生影响，静默故障是无害的） 错误检测：当某个错误信息或者错误信号（Error message or Error signal）未被感知到，该错误就叫做静默错误（Latent Error），例如未感知到超时等 错误未被检测或者检测到而未有容错处理的话，就会产生业务失效（中断、性能下降等） 错误模式：类似于故障模式，区别是错误对象通常是业务操作而不是系统内部组件，错误表现和故障表现基本上是一样的 1.4. 失效（Failure）：系统当前的业务偏离正常业务（Correct Service ）的事件 # 偏离的表现：未按照规格要求实现或者规格要求本身不完整，通常称之为业务中断（Service Outage） 偏离正常业务的表现形式称之为失效模式（Failure Mode） = 失效对象 + 失效表现 失效对象：与故障对象不同的是，失效是基于外部客户业务的角度进行描述的，因此失效对象主要为客户的业务类型/模型或者抽象表达，所以描述为业务（数据面-用户业务）、数据（数据面-用户数据）、控制台（管控面）、扩容（运维面）、升级（运维面）、更换（运维面）等等诸如此类 失效表现：相对于故障表现而言，会更加聚焦一些，一般也是动词、形容词来表达，主要有中断，卡慢，超时，丢失/错误，失败等 失效的行为规律： 持续性失效：一直失效直到人为恢复 间歇性/周期性失效：周期性或者无规律隔段时间出现一次然后自我恢复 偶然性失效：偶然出现一次然后自我恢复 失效对客户业务不同的影响程度的等级叫做失效严重程度（ Failure Severities ），也叫失效严酷度 失效对象对于客户而言就有重要性之分（不同的业务类型有着不同的重要性，比如说数据面业务重要性要大于管控面业务），同时对象本身还隐含着范围的概念（主要是指影响的用户数量，比如是影响了所有用户，还是影响了少部分用户，影响的用户数据范围等） 失效表现的角度来看也会有所区分，从两个维度来看，一是失效表现本身对客户的影响大小（比如数据丢失就是业务中断要影响大，中断要比卡慢影响大等等），二是失效表现的关键特征（包括持续时间例如时间越长对客户影响越大、出现次数例如次数越多则对客户影响越大） 在其他条件同等下，业务越重要、影响用户越多、影响越深、持续时间越长、发生次数越多则严重程度越高 可以是部分业务失效也可以是全部业务失效。部分失效也叫作降级工作状态，表现为业务降速，业务受限，应急状态等 失效是在系统的边界处体现出来的非正常的输出表现 1.</description>
    </item>
    
    <item>
      <title>数据密集型应用系统设计</title>
      <link>/docs/examination/system-architect/book-study/designing-data-intensive-application/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/docs/examination/system-architect/book-study/designing-data-intensive-application/</guid>
      <description>参考书本《数据密集型应用系统设计》
第一部分 数据系统基础 # 1. 可靠、可拓展与可维护的应用系统 # 1.1. 可靠性 # 用户期望的功能实现 容忍用户错误或不正确的使用方法 性能可以应对的典型场景、压力和数据量 系统可以防止未经授权的访问和滥用 1.2. 可扩展性 # 负载描述
qps（queries Per Second） 性能描述
百分位数：类似于中位数，不过是按照百分比计算的中位数 关注的百分位数一般有95%、99%、99.9% 1.3. 可维护性 # 运营
监视系统健康状况，出现异常快速恢复 追踪问题原因，如系统故障和性能下降 保持软件和平台到最新状态，如安全补丁 避免执行破坏性操作 预测未来可能的问题，如容量不足 建立用于部署、配置管理等实践规范和工具包 执行复杂的维护任务，如迁移 配置更改，维护系统安全稳定 指定流程规范操作行为 传承相关知识 系统设计考虑点
提供系统运行时行为和内部的观测性，方便监控 自动化标准工具集成 避免特定机器绑定，允许整体运行完整的同时，部分机器停机维护 文档和操作模式良好 默认配置良好 尝试自我修复，并允许管理员手动控制状态 预测可能出现的意外进行处理 简单化
后续人员好维护 可演化
应对需求改变的解决方案考虑 2. 数据模型与查询语言 # 2.1. 数据库分类 # 关系型
数据之间存在关系，查询需要按照关系进行查询 一般是多对多的关系 如sql、网络数据库、图数据库 文档型
一对多，一个id对应很多数据，但是数据之间关系不大 如json、xml等 第二部分 分布式数据系统 # 第三部分 派生数据 # </description>
    </item>
    
  </channel>
</rss>
